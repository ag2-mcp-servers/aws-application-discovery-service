# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:35:15+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AgentId(RootModel[constr(pattern=r'\S+', min_length=10, max_length=20)]):
    root: constr(pattern=r'\S+', min_length=10, max_length=20)


class AgentIds(RootModel[List[AgentId]]):
    root: List[AgentId]


class AgentStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    RUNNING = 'RUNNING'
    UNKNOWN = 'UNKNOWN'
    BLACKLISTED = 'BLACKLISTED'
    SHUTDOWN = 'SHUTDOWN'


class ApplicationDescription(
    RootModel[constr(pattern=r'(^$|[\s\S]*\S[\s\S]*)', max_length=1000)]
):
    root: constr(pattern=r'(^$|[\s\S]*\S[\s\S]*)', max_length=1000)


class ApplicationId(RootModel[constr(pattern=r'\S+', max_length=200)]):
    root: constr(pattern=r'\S+', max_length=200)


class ApplicationIdsList(RootModel[List[ApplicationId]]):
    root: List[ApplicationId]


class ApplicationName(RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=127)]):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=127)


class AssociateConfigurationItemsToApplicationResponse(BaseModel):
    pass


class AuthorizationErrorException(RootModel[Any]):
    root: Any


class BatchDeleteImportDataErrorCode(Enum):
    NOT_FOUND = 'NOT_FOUND'
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR'
    OVER_LIMIT = 'OVER_LIMIT'


class BatchDeleteImportDataErrorDescription(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class BoxedInteger(RootModel[int]):
    root: int


class ClientRequestToken(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class Condition(RootModel[constr(pattern=r'\S+', max_length=200)]):
    root: constr(pattern=r'\S+', max_length=200)


class ConfigurationId(RootModel[constr(pattern=r'\S*', max_length=200)]):
    root: constr(pattern=r'\S*', max_length=200)


class ConfigurationIdList(RootModel[List[ConfigurationId]]):
    root: List[ConfigurationId]


class ConfigurationItemType(Enum):
    SERVER = 'SERVER'
    PROCESS = 'PROCESS'
    CONNECTION = 'CONNECTION'
    APPLICATION = 'APPLICATION'


class ConfigurationsDownloadUrl(RootModel[str]):
    root: str


class ConfigurationsExportId(RootModel[constr(pattern=r'\S*', max_length=200)]):
    root: constr(pattern=r'\S*', max_length=200)


class ConflictErrorException(RootModel[Any]):
    root: Any


class ContinuousExportIds(RootModel[List[ConfigurationsExportId]]):
    root: List[ConfigurationsExportId]


class ContinuousExportStatus(Enum):
    START_IN_PROGRESS = 'START_IN_PROGRESS'
    START_FAILED = 'START_FAILED'
    ACTIVE = 'ACTIVE'
    ERROR = 'ERROR'
    STOP_IN_PROGRESS = 'STOP_IN_PROGRESS'
    STOP_FAILED = 'STOP_FAILED'
    INACTIVE = 'INACTIVE'


class CreateApplicationRequest(BaseModel):
    description: Optional[ApplicationDescription] = None
    name: ApplicationName


class CreateTagsResponse(BaseModel):
    pass


class DataSource(Enum):
    AGENT = 'AGENT'


class DatabaseName(RootModel[constr(min_length=1, max_length=252)]):
    root: constr(min_length=1, max_length=252)


class DeleteApplicationsRequest(BaseModel):
    configurationIds: ApplicationIdsList


class DeleteApplicationsResponse(BaseModel):
    pass


class DeleteTagsResponse(BaseModel):
    pass


class DescribeConfigurationsRequest(BaseModel):
    configurationIds: ConfigurationIdList


class DescribeContinuousExportsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class DescribeImportTasksMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class DisassociateConfigurationItemsFromApplicationRequest(BaseModel):
    applicationConfigurationId: ApplicationId
    configurationIds: ConfigurationIdList


class DisassociateConfigurationItemsFromApplicationResponse(BaseModel):
    pass


class ExportConfigurationsResponse(BaseModel):
    exportId: Optional[ConfigurationsExportId] = None


class ExportDataFormat(Enum):
    CSV = 'CSV'
    GRAPHML = 'GRAPHML'


class ExportDataFormats(RootModel[List[ExportDataFormat]]):
    root: List[ExportDataFormat]


class ExportIds(RootModel[List[ConfigurationsExportId]]):
    root: List[ConfigurationsExportId]


class ExportRequestTime(RootModel[datetime]):
    root: datetime


class ExportStatus(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    IN_PROGRESS = 'IN_PROGRESS'


class ExportStatusMessage(RootModel[str]):
    root: str


class FilterName(RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=1000)]):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=1000)


class FilterValue(RootModel[constr(pattern=r'(^$|[\s\S]*\S[\s\S]*)', max_length=1000)]):
    root: constr(pattern=r'(^$|[\s\S]*\S[\s\S]*)', max_length=1000)


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class GetDiscoverySummaryRequest(BaseModel):
    pass


class HomeRegionNotSetException(RootModel[Any]):
    root: Any


class ImportStatus(Enum):
    IMPORT_IN_PROGRESS = 'IMPORT_IN_PROGRESS'
    IMPORT_COMPLETE = 'IMPORT_COMPLETE'
    IMPORT_COMPLETE_WITH_ERRORS = 'IMPORT_COMPLETE_WITH_ERRORS'
    IMPORT_FAILED = 'IMPORT_FAILED'
    IMPORT_FAILED_SERVER_LIMIT_EXCEEDED = 'IMPORT_FAILED_SERVER_LIMIT_EXCEEDED'
    IMPORT_FAILED_RECORD_LIMIT_EXCEEDED = 'IMPORT_FAILED_RECORD_LIMIT_EXCEEDED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_FAILED = 'DELETE_FAILED'
    DELETE_FAILED_LIMIT_EXCEEDED = 'DELETE_FAILED_LIMIT_EXCEEDED'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class ImportTaskFilterName(Enum):
    IMPORT_TASK_ID = 'IMPORT_TASK_ID'
    STATUS = 'STATUS'
    NAME = 'NAME'


class ImportTaskFilterValue(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class ImportTaskFilterValueList(RootModel[List[ImportTaskFilterValue]]):
    root: List[ImportTaskFilterValue] = Field(..., max_length=100, min_length=1)


class ImportTaskIdentifier(RootModel[constr(pattern=r'\S*', max_length=200)]):
    root: constr(pattern=r'\S*', max_length=200)


class ImportTaskName(
    RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=255)


class ImportURL(
    RootModel[
        constr(pattern=r'\S+://\S+/[\s\S]*\S[\s\S]*', min_length=1, max_length=4000)
    ]
):
    root: constr(pattern=r'\S+://\S+/[\s\S]*\S[\s\S]*', min_length=1, max_length=4000)


class Integer(RootModel[int]):
    root: int


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class Long(RootModel[int]):
    root: int


class NextToken(RootModel[str]):
    root: str


class OperationNotPermittedException(RootModel[Any]):
    root: Any


class OrderByElementFieldName(
    RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=1000)]
):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', max_length=1000)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3Bucket(RootModel[str]):
    root: str


class S3PresignedUrl(RootModel[str]):
    root: str


class ServerInternalErrorException(RootModel[Any]):
    root: Any


class StartContinuousExportRequest(BaseModel):
    pass


class StartDataCollectionByAgentIdsRequest(BaseModel):
    agentIds: AgentIds


class StartExportTaskResponse(BaseModel):
    exportId: Optional[ConfigurationsExportId] = None


class StartImportTaskRequest(BaseModel):
    clientRequestToken: Optional[ClientRequestToken] = None
    importUrl: ImportURL
    name: ImportTaskName


class StopContinuousExportRequest(BaseModel):
    exportId: ConfigurationsExportId


class StopDataCollectionByAgentIdsRequest(BaseModel):
    agentIds: AgentIds


class String(RootModel[constr(pattern=r'[\s\S]*', max_length=10000)]):
    root: constr(pattern=r'[\s\S]*', max_length=10000)


class StringMax255(
    RootModel[constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[\s\S]*\S[\s\S]*', min_length=1, max_length=255)


class TagFilter(BaseModel):
    name: FilterName
    values: FilterValues


class TagFilters(RootModel[List[TagFilter]]):
    root: List[TagFilter]


class TagKey(RootModel[str]):
    root: str


class TagValue(RootModel[str]):
    root: str


class TimeStamp(RootModel[datetime]):
    root: datetime


class ToDeleteIdentifierList(RootModel[List[ImportTaskIdentifier]]):
    root: List[ImportTaskIdentifier] = Field(..., max_length=10, min_length=1)


class UpdateApplicationRequest(BaseModel):
    configurationId: ApplicationId
    description: Optional[ApplicationDescription] = None
    name: Optional[ApplicationName] = None


class UpdateApplicationResponse(BaseModel):
    pass


class OrderString(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class XAmzTarget(Enum):
    AWSPoseidonService_V2015_11_01_AssociateConfigurationItemsToApplication = (
        'AWSPoseidonService_V2015_11_01.AssociateConfigurationItemsToApplication'
    )


class XAmzTarget1(Enum):
    AWSPoseidonService_V2015_11_01_BatchDeleteImportData = (
        'AWSPoseidonService_V2015_11_01.BatchDeleteImportData'
    )


class XAmzTarget2(Enum):
    AWSPoseidonService_V2015_11_01_CreateApplication = (
        'AWSPoseidonService_V2015_11_01.CreateApplication'
    )


class XAmzTarget3(Enum):
    AWSPoseidonService_V2015_11_01_CreateTags = (
        'AWSPoseidonService_V2015_11_01.CreateTags'
    )


class XAmzTarget4(Enum):
    AWSPoseidonService_V2015_11_01_DeleteApplications = (
        'AWSPoseidonService_V2015_11_01.DeleteApplications'
    )


class XAmzTarget5(Enum):
    AWSPoseidonService_V2015_11_01_DeleteTags = (
        'AWSPoseidonService_V2015_11_01.DeleteTags'
    )


class XAmzTarget6(Enum):
    AWSPoseidonService_V2015_11_01_DescribeAgents = (
        'AWSPoseidonService_V2015_11_01.DescribeAgents'
    )


class XAmzTarget7(Enum):
    AWSPoseidonService_V2015_11_01_DescribeConfigurations = (
        'AWSPoseidonService_V2015_11_01.DescribeConfigurations'
    )


class XAmzTarget8(Enum):
    AWSPoseidonService_V2015_11_01_DescribeContinuousExports = (
        'AWSPoseidonService_V2015_11_01.DescribeContinuousExports'
    )


class XAmzTarget9(Enum):
    AWSPoseidonService_V2015_11_01_DescribeExportConfigurations = (
        'AWSPoseidonService_V2015_11_01.DescribeExportConfigurations'
    )


class XAmzTarget10(Enum):
    AWSPoseidonService_V2015_11_01_DescribeExportTasks = (
        'AWSPoseidonService_V2015_11_01.DescribeExportTasks'
    )


class XAmzTarget11(Enum):
    AWSPoseidonService_V2015_11_01_DescribeImportTasks = (
        'AWSPoseidonService_V2015_11_01.DescribeImportTasks'
    )


class XAmzTarget12(Enum):
    AWSPoseidonService_V2015_11_01_DescribeTags = (
        'AWSPoseidonService_V2015_11_01.DescribeTags'
    )


class XAmzTarget13(Enum):
    AWSPoseidonService_V2015_11_01_DisassociateConfigurationItemsFromApplication = (
        'AWSPoseidonService_V2015_11_01.DisassociateConfigurationItemsFromApplication'
    )


class XAmzTarget14(Enum):
    AWSPoseidonService_V2015_11_01_ExportConfigurations = (
        'AWSPoseidonService_V2015_11_01.ExportConfigurations'
    )


class XAmzTarget15(Enum):
    AWSPoseidonService_V2015_11_01_GetDiscoverySummary = (
        'AWSPoseidonService_V2015_11_01.GetDiscoverySummary'
    )


class XAmzTarget16(Enum):
    AWSPoseidonService_V2015_11_01_ListConfigurations = (
        'AWSPoseidonService_V2015_11_01.ListConfigurations'
    )


class XAmzTarget17(Enum):
    AWSPoseidonService_V2015_11_01_ListServerNeighbors = (
        'AWSPoseidonService_V2015_11_01.ListServerNeighbors'
    )


class XAmzTarget18(Enum):
    AWSPoseidonService_V2015_11_01_StartContinuousExport = (
        'AWSPoseidonService_V2015_11_01.StartContinuousExport'
    )


class XAmzTarget19(Enum):
    AWSPoseidonService_V2015_11_01_StartDataCollectionByAgentIds = (
        'AWSPoseidonService_V2015_11_01.StartDataCollectionByAgentIds'
    )


class XAmzTarget20(Enum):
    AWSPoseidonService_V2015_11_01_StartExportTask = (
        'AWSPoseidonService_V2015_11_01.StartExportTask'
    )


class XAmzTarget21(Enum):
    AWSPoseidonService_V2015_11_01_StartImportTask = (
        'AWSPoseidonService_V2015_11_01.StartImportTask'
    )


class XAmzTarget22(Enum):
    AWSPoseidonService_V2015_11_01_StopContinuousExport = (
        'AWSPoseidonService_V2015_11_01.StopContinuousExport'
    )


class XAmzTarget23(Enum):
    AWSPoseidonService_V2015_11_01_StopDataCollectionByAgentIds = (
        'AWSPoseidonService_V2015_11_01.StopDataCollectionByAgentIds'
    )


class XAmzTarget24(Enum):
    AWSPoseidonService_V2015_11_01_UpdateApplication = (
        'AWSPoseidonService_V2015_11_01.UpdateApplication'
    )


class AgentConfigurationStatus(BaseModel):
    agentId: Optional[String] = None
    description: Optional[String] = None
    operationSucceeded: Optional[Boolean] = None


class AgentConfigurationStatusList(RootModel[List[AgentConfigurationStatus]]):
    root: List[AgentConfigurationStatus]


class AgentNetworkInfo(BaseModel):
    ipAddress: Optional[String] = None
    macAddress: Optional[String] = None


class AgentNetworkInfoList(RootModel[List[AgentNetworkInfo]]):
    root: List[AgentNetworkInfo]


class AssociateConfigurationItemsToApplicationRequest(BaseModel):
    applicationConfigurationId: ApplicationId
    configurationIds: ConfigurationIdList


class BatchDeleteImportDataError(BaseModel):
    errorCode: Optional[BatchDeleteImportDataErrorCode] = None
    errorDescription: Optional[BatchDeleteImportDataErrorDescription] = None
    importTaskId: Optional[ImportTaskIdentifier] = None


class BatchDeleteImportDataErrorList(RootModel[List[BatchDeleteImportDataError]]):
    root: List[BatchDeleteImportDataError]


class BatchDeleteImportDataRequest(BaseModel):
    importTaskIds: ToDeleteIdentifierList


class BatchDeleteImportDataResponse(BaseModel):
    errors: Optional[BatchDeleteImportDataErrorList] = None


class Configuration(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class ConfigurationTag(BaseModel):
    configurationId: Optional[ConfigurationId] = None
    configurationType: Optional[ConfigurationItemType] = None
    key: Optional[TagKey] = None
    timeOfCreation: Optional[TimeStamp] = None
    value: Optional[TagValue] = None


class ConfigurationTagSet(RootModel[List[ConfigurationTag]]):
    root: List[ConfigurationTag]


class Configurations(RootModel[List[Configuration]]):
    root: List[Configuration]


class CreateApplicationResponse(BaseModel):
    configurationId: Optional[String] = None


class CustomerAgentInfo(BaseModel):
    activeAgents: Integer
    blackListedAgents: Integer
    healthyAgents: Integer
    shutdownAgents: Integer
    totalAgents: Integer
    unhealthyAgents: Integer
    unknownAgents: Integer


class CustomerAgentlessCollectorInfo(BaseModel):
    activeAgentlessCollectors: Integer
    denyListedAgentlessCollectors: Integer
    healthyAgentlessCollectors: Integer
    shutdownAgentlessCollectors: Integer
    totalAgentlessCollectors: Integer
    unhealthyAgentlessCollectors: Integer
    unknownAgentlessCollectors: Integer


class CustomerConnectorInfo(BaseModel):
    activeConnectors: Integer
    blackListedConnectors: Integer
    healthyConnectors: Integer
    shutdownConnectors: Integer
    totalConnectors: Integer
    unhealthyConnectors: Integer
    unknownConnectors: Integer


class CustomerMeCollectorInfo(BaseModel):
    activeMeCollectors: Integer
    denyListedMeCollectors: Integer
    healthyMeCollectors: Integer
    shutdownMeCollectors: Integer
    totalMeCollectors: Integer
    unhealthyMeCollectors: Integer
    unknownMeCollectors: Integer


class DescribeConfigurationsAttribute(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class DescribeConfigurationsAttributes(
    RootModel[List[DescribeConfigurationsAttribute]]
):
    root: List[DescribeConfigurationsAttribute]


class DescribeConfigurationsResponse(BaseModel):
    configurations: Optional[DescribeConfigurationsAttributes] = None


class DescribeContinuousExportsRequest(BaseModel):
    exportIds: Optional[ContinuousExportIds] = None
    maxResults: Optional[DescribeContinuousExportsMaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeExportConfigurationsRequest(BaseModel):
    exportIds: Optional[ExportIds] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeTagsRequest(BaseModel):
    filters: Optional[TagFilters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeTagsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tags: Optional[ConfigurationTagSet] = None


class ExportFilter(BaseModel):
    condition: Condition
    name: FilterName
    values: FilterValues


class ExportFilters(RootModel[List[ExportFilter]]):
    root: List[ExportFilter]


class ExportInfo(BaseModel):
    configurationsDownloadUrl: Optional[ConfigurationsDownloadUrl] = None
    exportId: ConfigurationsExportId
    exportRequestTime: ExportRequestTime
    exportStatus: ExportStatus
    isTruncated: Optional[Boolean] = None
    requestedEndTime: Optional[TimeStamp] = None
    requestedStartTime: Optional[TimeStamp] = None
    statusMessage: ExportStatusMessage


class ExportsInfo(RootModel[List[ExportInfo]]):
    root: List[ExportInfo]


class Filter(BaseModel):
    condition: Condition
    name: String
    values: FilterValues


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class GetDiscoverySummaryResponse(BaseModel):
    agentSummary: Optional[CustomerAgentInfo] = None
    agentlessCollectorSummary: Optional[CustomerAgentlessCollectorInfo] = None
    applications: Optional[Long] = None
    connectorSummary: Optional[CustomerConnectorInfo] = None
    meCollectorSummary: Optional[CustomerMeCollectorInfo] = None
    servers: Optional[Long] = None
    serversMappedToApplications: Optional[Long] = None
    serversMappedtoTags: Optional[Long] = None


class ImportTask(BaseModel):
    applicationImportFailure: Optional[Integer] = None
    applicationImportSuccess: Optional[Integer] = None
    clientRequestToken: Optional[ClientRequestToken] = None
    errorsAndFailedEntriesZip: Optional[S3PresignedUrl] = None
    importCompletionTime: Optional[TimeStamp] = None
    importDeletedTime: Optional[TimeStamp] = None
    importRequestTime: Optional[TimeStamp] = None
    importTaskId: Optional[ImportTaskIdentifier] = None
    importUrl: Optional[ImportURL] = None
    name: Optional[ImportTaskName] = None
    serverImportFailure: Optional[Integer] = None
    serverImportSuccess: Optional[Integer] = None
    status: Optional[ImportStatus] = None


class ImportTaskFilter(BaseModel):
    name: Optional[ImportTaskFilterName] = None
    values: Optional[ImportTaskFilterValueList] = None


class ImportTaskList(RootModel[List[ImportTask]]):
    root: List[ImportTask]


class ListConfigurationsResponse(BaseModel):
    configurations: Optional[Configurations] = None
    nextToken: Optional[NextToken] = None


class ListServerNeighborsRequest(BaseModel):
    configurationId: ConfigurationId
    maxResults: Optional[Integer] = None
    neighborConfigurationIds: Optional[ConfigurationIdList] = None
    nextToken: Optional[String] = None
    portInformationNeeded: Optional[Boolean] = None


class NeighborConnectionDetail(BaseModel):
    connectionsCount: Long
    destinationPort: Optional[BoxedInteger] = None
    destinationServerId: ConfigurationId
    sourceServerId: ConfigurationId
    transportProtocol: Optional[String] = None


class NeighborDetailsList(RootModel[List[NeighborConnectionDetail]]):
    root: List[NeighborConnectionDetail]


class OrderByElement(BaseModel):
    fieldName: OrderByElementFieldName
    sortOrder: Optional[OrderString] = None


class OrderByList(RootModel[List[OrderByElement]]):
    root: List[OrderByElement]


class SchemaStorageConfig(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class StartContinuousExportResponse(BaseModel):
    dataSource: Optional[DataSource] = None
    exportId: Optional[ConfigurationsExportId] = None
    s3Bucket: Optional[S3Bucket] = None
    schemaStorageConfig: Optional[SchemaStorageConfig] = None
    startTime: Optional[TimeStamp] = None


class StartDataCollectionByAgentIdsResponse(BaseModel):
    agentsConfigurationStatus: Optional[AgentConfigurationStatusList] = None


class StartExportTaskRequest(BaseModel):
    endTime: Optional[TimeStamp] = None
    exportDataFormat: Optional[ExportDataFormats] = None
    filters: Optional[ExportFilters] = None
    startTime: Optional[TimeStamp] = None


class StartImportTaskResponse(BaseModel):
    task: Optional[ImportTask] = None


class StopContinuousExportResponse(BaseModel):
    startTime: Optional[TimeStamp] = None
    stopTime: Optional[TimeStamp] = None


class StopDataCollectionByAgentIdsResponse(BaseModel):
    agentsConfigurationStatus: Optional[AgentConfigurationStatusList] = None


class Tag(BaseModel):
    key: TagKey
    value: TagValue


class TagSet(RootModel[List[Tag]]):
    root: List[Tag]


class AgentInfo(BaseModel):
    agentId: Optional[AgentId] = None
    agentNetworkInfoList: Optional[AgentNetworkInfoList] = None
    agentType: Optional[String] = None
    collectionStatus: Optional[String] = None
    connectorId: Optional[String] = None
    health: Optional[AgentStatus] = None
    hostName: Optional[String] = None
    lastHealthPingTime: Optional[String] = None
    registeredTime: Optional[String] = None
    version: Optional[String] = None


class AgentsInfo(RootModel[List[AgentInfo]]):
    root: List[AgentInfo]


class ContinuousExportDescription(BaseModel):
    dataSource: Optional[DataSource] = None
    exportId: Optional[ConfigurationsExportId] = None
    s3Bucket: Optional[S3Bucket] = None
    schemaStorageConfig: Optional[SchemaStorageConfig] = None
    startTime: Optional[TimeStamp] = None
    status: Optional[ContinuousExportStatus] = None
    statusDetail: Optional[StringMax255] = None
    stopTime: Optional[TimeStamp] = None


class ContinuousExportDescriptions(RootModel[List[ContinuousExportDescription]]):
    root: List[ContinuousExportDescription]


class CreateTagsRequest(BaseModel):
    configurationIds: ConfigurationIdList
    tags: TagSet


class DeleteTagsRequest(BaseModel):
    configurationIds: ConfigurationIdList
    tags: Optional[TagSet] = None


class DescribeAgentsRequest(BaseModel):
    agentIds: Optional[AgentIds] = None
    filters: Optional[Filters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeAgentsResponse(BaseModel):
    agentsInfo: Optional[AgentsInfo] = None
    nextToken: Optional[NextToken] = None


class DescribeContinuousExportsResponse(BaseModel):
    descriptions: Optional[ContinuousExportDescriptions] = None
    nextToken: Optional[NextToken] = None


class DescribeExportConfigurationsResponse(BaseModel):
    exportsInfo: Optional[ExportsInfo] = None
    nextToken: Optional[NextToken] = None


class DescribeExportTasksRequest(BaseModel):
    exportIds: Optional[ExportIds] = None
    filters: Optional[ExportFilters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None


class DescribeExportTasksResponse(BaseModel):
    exportsInfo: Optional[ExportsInfo] = None
    nextToken: Optional[NextToken] = None


class DescribeImportTasksFilterList(RootModel[List[ImportTaskFilter]]):
    root: List[ImportTaskFilter]


class DescribeImportTasksRequest(BaseModel):
    filters: Optional[DescribeImportTasksFilterList] = None
    maxResults: Optional[DescribeImportTasksMaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeImportTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[ImportTaskList] = None


class ListConfigurationsRequest(BaseModel):
    configurationType: ConfigurationItemType
    filters: Optional[Filters] = None
    maxResults: Optional[Integer] = None
    nextToken: Optional[NextToken] = None
    orderBy: Optional[OrderByList] = None


class ListServerNeighborsResponse(BaseModel):
    knownDependencyCount: Optional[Long] = None
    neighbors: NeighborDetailsList
    nextToken: Optional[String] = None
